- bw =  BitzlatoWallet.market_balances.transform_values { |v| { p2p: v } }
- w = AddressBalancesQuery.new.service_balances.transform_values { |v| { market: v } }
- pa = AddressBalancesQuery.new.deposit_balances.transform_values { |v| {payment_address: v} }
- balances = bw.deep_merge(w).deep_merge(pa)

thead.thead-dark
  tr
    th System balance
    th

    - Currency.order(:id).visible.each do |currency|
      th.text-right= format_currency currency

tbody
  tr
    th.text-right colspan=2 Total
    - Currency.order(:id).visible.each do |currency|
      td.text-right width=200
        - balance = balances.dig(currency.cc_code.to_s.downcase, :p2p).to_d + balances.dig(currency.id, :market).to_d + balances.dig(currency.id, :payment_address).to_d
        - if balance.zero?
          = middot
        - else
          = format_money(balance, currency)

  tr
    th.text-right colspan=2 P2P
    - Currency.order(:id).visible.each do |currency|
      td.text-right width=200
        - balance = balances.dig(currency.cc_code.to_s.downcase, :p2p)
        - if balance.nil?
          = middot
        - else
          = link_to format_money(balance, currency), bitzlato_wallets_path

  tr
    th.text-right colspan=2 Market
    - Currency.order(:id).visible.each do |currency|
      td.text-right width=200
        - balance = balances.dig(currency.id, :market)
        - if balance.nil?
          = middot
        - else
          = link_to format_money(balance, currency), wallets_path

  tr
    th.text-right colspan=2 Deposit Accounts
    - Currency.order(:id).visible.each do |currency|
      td.text-right width=200
        - balance = balances.dig(currency.id, :payment_address)
        - if balance.nil?
          = middot
        - else
          = link_to format_money(balance, currency), payment_addresses_path(q: { currency_id_eq: currency.id, with_balances: true })

